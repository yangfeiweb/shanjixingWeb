<template>
    <div class='learnStatistics'>
        <div class="header">
            <nav-header>
                <div slot="title" class="shopping-title">
                <div class='areas'>
                    <span class="area-item">{{title}}</span>
                </div>
                </div>
            </nav-header>
        </div>
        <div class="statisticsMain">
            <div class="statiscsTab">
                <el-radio-group v-model="tabSelect" class="tabRadio">
                        <el-radio-button label="周">按周</el-radio-button>
                        <el-radio-button label="月">按月</el-radio-button>
                        <el-radio-button label="年">按年</el-radio-button>
                </el-radio-group>
            </div>
            <div class="block" v-show="dayShow">
                <i class="el-icon-arrow-left" @click="getWeekTime('up')"></i>
                <b class="weekTime">{{dayValStart}} 至 {{dayValEnd}}</b>
                <i class="el-icon-arrow-right" @click="getWeekTime('down')"></i>
            </div>
            <div class="block" v-show="monthShow">
                <i class="el-icon-arrow-left" @click="getMonthTime('up')"></i>
                <b class="weekTime">{{monthVal}}</b>
                <i class="el-icon-arrow-right" @click="getMonthTime('down')"></i>
            </div>
            <div class="block" v-show="yearShow">
                <i class="el-icon-arrow-left" @click="getYearTime('up')"></i>
                <b class="weekTime">{{yearVal}}</b>
                <i class="el-icon-arrow-right" @click="getYearTime('down')"></i>
            </div>
            <ve-histogram v-if="!isLearn" :data="chartData" :settings="chartSettings"></ve-histogram>
            <div class="intro" v-if="isLearn">这段时间你没有进行学习呦！</div>
      </div>
    </div>
</template>
<script>
import navHeader from "@/components/navHeader";
import dataService from "@/service/index";

export default {
  components: {
    navHeader
  },
  data() {
    return {
      tabSelect: "周",
      statisticsType: "BY_WEEK",
      title: "学习统计",
      studentNo: "",
      dayShow: true,
      monthShow: false,
      yearShow: false,
      isLearn: false,
      pickerVal: {
        disabledDate(time) {
          return time.getTime() > Date.now();
        }
      },
      dayValStart: new Date(),
      dayValEnd: new Date(),
      monthVal: new Date(),
      yearVal: new Date(),
      timeStart: "",
      timeEnd: "",
      weekArr: null,
      chartData: {
        columns: ["日期", "学习单词数"],
        rows: []
      },
      chartSettings: {
        metrics: ["学习单词数"],
        dimension: ["日期"]
      }
      //   chartData: {
      //     columns: ["日期", "学习时间", "学习单词数"],
      //     rows: [
      //         { 学习时间: 1523, 日期: "1月1日", 学习单词数: 1523 },
      //         { 学习时间: 1223, 日期: "1月2日", 学习单词数: 1523 },
      //         { 学习时间: 2123, 日期: "1月3日", 学习单词数: 1523 },
      //         { 学习时间: 4123, 日期: "1月4日", 学习单词数: 1523 }
      //     ]
      //   },
      //   chartSettings: {
      //     metrics: ["学习时间", "学习单词数"],
      //     dimension: ["日期"]
      //   }
    };
  },
  methods: {
    // 获取数据
    getData(start, end) {
      // 处理时间 将时间格式 转为yyyyMMdd
      let startTime = start;
      let endTime = end;
      if (this.statisticsType === "BY_WEEK") {
        startTime = startTime.replace(/-/g, "");
        endTime = endTime.replace(/-/g, "");
      } else if (this.statisticsType === "BY_MONTH") {
        startTime = startTime.replace(/-/g, "") + "01";
      } else if (this.statisticsType === "BY_YEAR") {
        startTime = startTime + "0101";
      }
      console.log("-------startTime", startTime);
      console.log("-------endTime", endTime);
      dataService
        .getStatisticsWords(
          this.studentNo,
          this.statisticsType,
          startTime,
          endTime
        )
        .then(
          res => {
            console.log("---------柱状图-res", res);
            let code = res.data.code;
            if (code === 200) {
              let newList = res.data.data;
              if (newList.length === 0) {
                this.isLearn = true;
              } else {
                this.isLearn = false;
              }
              if (
                this.statisticsType === "BY_WEEK" ||
                this.statisticsType === "BY_MONTH"
              ) {
                newList.forEach(e => {
                  let wordN = e.num;
                  let month = e.day.slice(4, 6);
                  let day = e.day.slice(6, 8);
                  console.log("----month", month);
                  console.log("----day", day);
                  let showTime = month + "月" + day + "日";
                  this.chartData.rows.push({
                    // 学习时间: wordN,
                    日期: showTime,
                    学习单词数: wordN
                  });
                });
                console.log("-----this.chartData.rows", this.chartData.rows);
              } else if (this.statisticsType === "BY_YEAR") {
                newList.forEach(e => {
                  let wordN = e.num;
                  let year = e.month.slice(0, 4);
                  console.log("----year", year);
                  let showTime = year + "年";
                  this.chartData.rows.push({
                    // 学习时间: wordN,
                    日期: showTime,
                    学习单词数: wordN
                  });
                });
                console.log("-----this.chartData.rows", this.chartData.rows);
              }
            }
          },
          () => {}
        );
    },
    getWeekTime(type) {
      console.log(type);
      if (type === "up") {
        //  请求上周
        let timestamp = Date.parse(new Date(this.weekArr[0]));
        this.weekArr = this.timeWeek(timestamp, "jian");
        console.log("------当前周的所有日期",timestamp);
        this.dayValStart = this.weekArr[0];
        this.dayValEnd = this.weekArr[6];
        console.log("------this.dayValStart", this.dayValStart);
        console.log("------this.dayValEnd", this.dayValEnd);
        this.chartData.rows = [];
        this.getData(this.dayValStart, this.dayValEnd);
      } else {
        //  请求下周
        console.log(this.weekArr[6]);
        let timestamp = Date.parse(new Date(this.weekArr[6]));
        let nowTimestamp = Date.parse(new Date());
        if (nowTimestamp > timestamp) {
          this.weekArr = this.timeWeek(timestamp, "jia");
          console.log(timestamp);
        }
        this.dayValStart = this.weekArr[0];
        this.dayValEnd = this.weekArr[6];
        this.chartData.rows = [];
        this.getData(this.dayValStart, this.dayValEnd);
      }
    },
    timeWeek(timestamps, sum) {
      let week = [];
      if (sum === "jian") {
        for (let i = 7; i > 0; i--) {
          week.push(this.timestampToTime(timestamps - 3600 * 1000 * 24 * i));
        }
      } else {
        for (let i = 0; i < 7; i++) {
          week.push(
            this.timestampToTime(timestamps + 3600 * 1000 * 24 * (i + 1))
          );
        }
        console.log(week);
      }
      return week;
    },
    getMonthTime(type) {
      console.log(type);
      let months = parseFloat(this.monthVal.substring(5, 7));
      let years = parseFloat(this.monthVal.substring(0, 4));
      console.log(months);
      if (type === "up") {
        if (months === 1) {
          this.monthVal = years - 1 + "-" + 12;
        } else {
          if (months < 10) {
            this.monthVal = years + "-0" + (months - 1);
          } else {
            this.monthVal = years + "-" + (months - 1);
          }
        }
        this.chartData.rows = [];
        this.getData(this.monthVal, "");
      } else {
        let a = this.formatDateTime(new Date())
          .substring(0, 7)
          .split("-");
        let j = parseFloat(a[0] + a[1]);
        let k = parseFloat(
          this.monthVal.split("-")[0] + "" + this.monthVal.split("-")[1]
        );
        console.log(j);
        console.log(k);
        if (k < j) {
          console.log("小于");
          if (months === 12) {
            this.monthVal = years + 1 + "-0" + 1;
          } else {
            if (months < 9) {
              this.monthVal = years + "-0" + (months + 1);
            } else {
              this.monthVal = years + "-" + (months + 1);
            }
          }
        }
        this.chartData.rows = [];
        this.getData(this.monthVal, "");
      }
    },
    getYearTime(type) {
      console.log(type);
      let y = parseFloat(this.formatDateTime(new Date()).substring(0, 4));
      let years = parseFloat(this.yearVal);
      if (type === "up") {
        this.yearVal = years - 1;
        this.chartData.rows = [];
        this.getData(this.yearVal, "");
      } else {
        if (years < y) {
          this.yearVal = years + 1;
        }
        this.chartData.rows = [];
        this.getData(this.yearVal, "");
      }
    },
    // 将时间戳转化为yyyymmdd
    timestampToTime(timestamp) {
      let date = new Date(timestamp);
      let Y = date.getFullYear() + "";
      let M =
        (date.getMonth() + 1 < 10
          ? "0" + (date.getMonth() + 1)
          : date.getMonth() + 1) + "";
      let D = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
      return Y + "-" + M + "-" + D;
    },
    // 将国际时间格式转化为yyyymmdd
    formatDateTime(time) {
      console.log("nihaos");
      let year = time.getFullYear();
      let month =
        time.getMonth() + 1 < 10
          ? "0" + (time.getMonth() + 1)
          : time.getMonth() + 1;
      let date = time.getDate() < 10 ? "0" + time.getDate() : time.getDate();
      return year + "-" + month + "-" + date;
    },
    getCurrMonthDay(date) {
      let oneDayTime = 24 * 60 * 60 * 1000;
      let time = new Date(date);
      let arr = [];
      let currMouthDate = new Date(time.getFullYear(), time.getMonth() + 1, 0); // 当月最后一天的 date
      let days = currMouthDate.getDate(); // 得到当月一共月几天
      let dateTimes = currMouthDate.getTime();
      let temp = null;
      for (let i = 0; i < days; i++) {
        let s = dateTimes - i * oneDayTime;
        temp = new Date(s);
        arr.unshift(this.timestampToTime(temp));
      }
      return arr;
    },
    getWeekSection(date) {
      let oneDayTime = 24 * 60 * 60 * 1000;
      // 根据某个日期获取当周的周一和周日的日期
      let week = [];
      let nowTime = date.getTime();
      let day = date.getDay() || 7;
      let MondayTime = nowTime - (day - 1) * oneDayTime; // 周一
      let startDate = new Date(MondayTime);
      let startTime = startDate.getTime();
      week.push(this.timestampToTime(startDate));
      for (let i = 1; i < 7; i++) {
        let s = i * oneDayTime;
        let time = new Date(startTime + s);
        week.push(this.timestampToTime(time));
      }
      console.log(week);
      return week;
    }
  },
  mounted() {
    this.weekArr = this.getWeekSection(new Date());
    console.log("-----当前周的所有日期",this.weekArr);
    this.dayValStart = this.weekArr[0];
    this.dayValEnd = this.weekArr[6];
    console.log(this.dayValStart, this.dayValEnd);
    console.log(this.getCurrMonthDay(new Date()));
    // 获取studentNo
    this.studentNo = localStorage.getItem("studentNo");
    console.log("-----this.studentNo", this.studentNo);
    // 获取数据
    this.getData(this.dayValStart, this.dayValEnd);
  },
  watch: {
    tabSelect(val, oldVal) {
      console.log(val, oldVal);
      if (val === "周") {
        this.dayShow = true;
        this.monthShow = false;
        this.yearShow = false;
        this.statisticsType = "BY_WEEK";
        this.chartData.rows = [];

        this.getData(this.dayValStart, this.dayValEnd);
      } else if (val === "月") {
        this.dayShow = false;
        this.monthShow = true;
        this.yearShow = false;
        this.monthVal = this.formatDateTime(new Date()).substring(0, 7);

        // console.log("---------this.monthVal",this.monthVal);
        // let monthStart=this.monthVal.replace(/-/g,'')+"01";
        this.statisticsType = "BY_MONTH";
        this.chartData.rows = [];
        this.getData(this.monthVal, "");
      } else {
        this.dayShow = false;
        this.monthShow = false;
        this.yearShow = true;
        this.yearVal = this.formatDateTime(new Date()).substring(0, 4);
        this.statisticsType = "BY_YEAR";
        this.chartData.rows = [];
        this.getData(this.yearVal, "");
      }
    }
  },
  computed: {}
};
</script>

<style lang="scss">
.learnStatistics {
  .statisticsMain {
    text-align: center;
    .ve-histogram {
      margin: 20px;
    }
    .statiscsTab {
      margin-top: 20px;
      .el-radio-button {
        width: 200px;
        .el-radio-button__inner {
          width: 200px;
        }
      }
      .is-active {
        .el-radio-button__inner {
          background-color: #1db9fe;
          border-color: #1db9fe;
        }
      }
    }
    .block {
      margin: 10px;
      text-align: center;
      .weekTime {
        font-weight: normal;
      }
      i {
        cursor: pointer;
      }
      .el-input__inner {
        border: none;
        padding: 0;
        text-align: center;
      }
      .el-input__icon {
        display: none;
      }
    }
    .intro {
      margin-top: 200px;
      font-size: 32px;
      color: #1db9fe;
    }
  }
}
</style>
