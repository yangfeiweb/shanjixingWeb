<template>
  <div class="learn-center cnfont">

    <nav-header :showBack="false">
      <span slot="title">学习中心</span>
    </nav-header>
    <div class="book-container">
      <vue-better-scroll style="height:100%" class="wrapper" ref="scroll">
        <ul>
          <li class="learn-box" v-for="(item,index) in datalist" :key='index'>
            <div class="box-left">
              <img :src='url+item.coverImgUrl' alt="">
              <div class="bmbox" @click="open(item)">
                <i class="iconfont icon-shanchu deleteBook"></i>
              </div>
            </div>
            <div class="box-right">
              <div class="bookname">{{item.name}}</div>
              <div>
                <el-progress :text-inside="true" :stroke-width="18" :percentage="item.percentage"></el-progress>
              </div>
              <div v-if="learnBtn">
                <el-button type="primary" @click="learnStart(item)">开始学习</el-button>
              </div>
              <el-button type="success" v-else>继续学习</el-button>
            </div>
          </li>
        </ul>
      </vue-better-scroll>
    </div>
  </div>
</template>

<script>
import VueBetterScroll from "vue2-better-scroll";
import navHeader from "@/components/navHeader";
import dataService from "@/service/index";
import { ResourcePath } from "../../service/urlConfig";

export default {
  components: {
    navHeader,
    VueBetterScroll
  },
  data() {
    return {
      url: ResourcePath,
      learnBtn: true,
      datalist: [],
      bookNo: "",
      status: ""
    };
  },
  mounted() {
    this.getDownBooklist();
  },
  methods: {
    learnStart(val) {
      this.$router.push({
        name: "learnIndex",
        params: {
          bookInfo: val
        }
      });
    },
    getDownBooklist() {
      dataService.getDownBookList(0, 200).then(
        res => {
          let result = res.data;
          let code = result.code;
          let data = result.data;
          let msg = result.msg;
          if (code == 200) {
            console.log(data);
            this.datalist = data.content;
          } else {
            this.$message.error(msg);
          }
        },
        err => {
          this.$message.error("请求错误");
        }
      );
    },
    open(item) {
      this.$confirm(`你确定想要删除${item.name}吗, 是否继续?`, "删除", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          console.log(item, "-----------");
          this.bookNo = item.bookNo;
          this.status = "DELETE";
          dataService.downBook(this.bookNo, this.status).then(
            res => {
              let result = res.data;
              let code = result.code;
              let msg = result.msg;
              if (code == 200) {
                this.$message.success(msg);
                this.getDownBooklist();
              } else {
                this.$message.error(msg);
              }
            },
            err => {
              this.$message.error("请求错误");
            }
          );
        })
        .catch(() => {
          this.$message({
            type: "info",
            message: "已取消删除"
          });
        });
    }
  }
};
</script>

<style lang="scss" >
.learn-center {
  width: 100%;
  height: 100%;
  .book-container {
    position: fixed;
    top: 80px;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 10px;
    background: #f7f7f7;
    .wrapper {
      background: #fff;
      border-radius: 30px;
      overflow-y: scroll;
      ul {
        list-style: none;
        margin: 0 auto;
        display: flex;
        flex-wrap: wrap;
        .learn-box {
          height: 130px;
          background: #c0c4cc;
          padding: 10px;
          margin: 10px;
          .box-left {
            float: left;
            width: 100px;
            height: 130px;
            line-height: 130px;
            position: relative;
            cursor: pointer;
            img {
              width: 100%;
              vertical-align: middle;
            }
            .bmbox {
              width: 100px;
              height: 40px;
              background: rgba($color: #000000, $alpha: 0.5);
              position: absolute;
              bottom: 0px;
              left: 0px;
              display: none;
              font: 12px/30px "宋体";
              color: white;
              text-align: center;
            }
          }
          .box-left:hover .bmbox {
            width: 100px;
            height: 40px;
            background: rgba($color: #000000, $alpha: 0.5);
            position: absolute;
            bottom: -2px;
            left: 0px;
            display: block;
            font: 12px/30px "宋体";
            color: white;
            text-align: center;
            .deleteBook {
              font-size: 30px;
              position: absolute;
              bottom: 0;
              left: 30%;
            }
          }
          .box-right {
            float: left;
            height: 130px;
            margin-left: 20px;
            .bookname {
              width: 150px;
              display: flex;
              flex-wrap: wrap;
            }
            .el-progress {
              position: relative;
              line-height: 3;
            }
            .el-progress-bar__outer {
              background-color: #fff;
            }
            .el-button {
              padding: 15px 40px;
            }
            div {
              padding: 0;
            }
          }
        }
      }
    }
  }
}
</style>


